##############################################################################
# INIT
##############################################################################
# if not running interactively, don't do anything
[ -z "$PS1" ] && return

# platform specific script comes first!
platform_script=~/.bash_`uname | awk '{ print tolower($0) }'`
[ -f $platform_script ] && . $platform_script
unset platform_script

##############################################################################
# GENERAL
##############################################################################
export EDITOR=nvim

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
# if ! shopt -oq posix; then
#   if [ -f /usr/share/bash-completion/bash_completion ]; then
#     source /usr/share/bash-completion/bash_completion
#   elif [ -f /usr/local/etc/bash_completion ]; then
#     source /usr/local/etc/bash_completion
#   fi
# fi

# if [ -d /usr/local/etc/bash_completion.d ]; then
#     for line in $(find /usr/local/etc/bash_completion.d -iname "*.sh"); do
#         source $line
#     done
# fi

# source profile that is shared between shells
if [ -f ~/.common_profile ]; then
    source ~/.common_profile
fi

# source aliases if present
if [ -f ~/.aliases ]; then
    source ~/.aliases
fi

##############################################################################
# HISTORY
##############################################################################
# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

##############################################################################
# PROMPT
##############################################################################
if [ -f $HOME/.git-prompt.sh ]; then
    source $HOME/.git-prompt.sh
fi
NO_COLOR='\[\033[0m\]'
YELLOW='\[\033[0;33m\]'
RED='\[\033[1;31m\]'
GREEN='\[\033[0;32m\]'
BLUE='\[\033[0;34m\]'
PURPLE='\[\033[0;35m\]'
WHITE='\[\033[0;37m\]'
GIT_PS1_SHOWDIRTYSTATE=true
function color_my_prompt {
    local EXIT="$?"
    local __user_and_host="\u@\h"
    local __cur_location="\W"
    local __git_info='$(__git_ps1 "(%s)")'
    local __prompt_tail="$PURPLE$"
    if [ $EXIT -gt 0 ]; then
        __prompt_tail="$RED$EXIT $__prompt_tail"
    fi
    export PS1="$GREEN$__user_and_host $BLUE$__cur_location $YELLOW$__git_info $__prompt_tail$NO_COLOR "
}
PROMPT_COMMAND=color_my_prompt

# enable direnv
if [ which -a direnv ]; then
    eval "$(direnv hook bash)"
fi

##############################################################################
# CUSTOM ADDITIONS
##############################################################################
# local stuff
[ -f ~/.bash_local ] && . ~/.bash_local

# fix ssh-agent
#SSH_ENV="$HOME/.ssh/environment"

#function start_agent {
#    echo "Initialising new SSH agent..."
#    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
#    echo succeeded
#    chmod 600 "${SSH_ENV}"
#    . "${SSH_ENV}" > /dev/null
#    /usr/bin/ssh-add;
#}

## Source SSH settings, if applicable

#if [ -f "${SSH_ENV}" ]; then
#    . "${SSH_ENV}" > /dev/null
#    #ps ${SSH_AGENT_PID} doesn't work under cywgin
#    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#        start_agent;
#    }
#else
#    start_agent;
#fi

# Arrow search history
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# Move by whitespace-delimited words
bind '"\eB": shell-backward-word'
bind '"\eF": shell-forward-word'

# enable ginkgo focus in editors
export GINKGO_EDITOR_INTEGRATION=true

# source /usr/local/share/chruby/chruby.sh
# source /usr/local/share/chruby/auto.sh

if [ -f $HOME/.cargo/env ]; then
    source $HOME/.cargo/env
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/pivotal/Downloads/google-cloud-sdk/path.bash.inc' ]; then source '/home/pivotal/Downloads/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/pivotal/Downloads/google-cloud-sdk/completion.bash.inc' ]; then source '/home/pivotal/Downloads/google-cloud-sdk/completion.bash.inc'; fi

export GEM_HOME=$HOME/.gems
export PATH=$GEM_HOME/bin:$PATH
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"
# linux
[ -s ~/.autojump/etc/profile.d/autojump.sh ] && source ~/.autojump/etc/profile.d/autojump.sh
# darwin
[ -s /usr/local/etc/profile.d/autojump.sh ] && source /usr/local/etc/profile.d/autojump.sh
export PATH="$HOME/.cargo/bin:$PATH"
export VAULT_ADDR=https://vault.oratos.ci.cf-app.com

complete -C /home/pivotal/bin/vault vault

eval "$(direnv hook bash)"

[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# https://werat.github.io/2017/02/04/tmux-ssh-agent-forwarding.html
if [ ! -S ~/.ssh/ssh_auth_sock ] && [ -S "$SSH_AUTH_SOCK" ]; then
    ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
fi

# add kubebuilder to path
export PATH=$PATH:/usr/local/kubebuilder/bin

source <(kubectl completion bash)
